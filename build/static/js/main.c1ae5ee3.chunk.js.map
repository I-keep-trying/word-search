{"version":3,"sources":["components/Heading.js","services/dictionary.js","components/SearchForm.js","services/stringDiff.js","components/Footer.js","App.js","index.js"],"names":["HeaderMenu","Menu","inverted","className","Item","as","header","Icon","name","size","getWords","word","axios","get","then","response","data","SearchForm","useState","results","setResults","userInput","setUserInput","exclusions","setExclusions","copied","setCopied","message","setMessage","filterExclusions","arr1","arr2","wildcards1","match","wildcards2","exArr","split","join","regx","RegExp","newArr","filter","state","filterStrings","console","log","reduce","acc","item","length","push","forEach","obj","a","b","i","j","len1","len2","end1","end2","error","strMatch1","matchAll","strMatch2","stringDiff","toast","handleClick","e","preventDefault","alpha","numeric","r","newUserInput","replace","s","Container","fluid","Segment","List","celled","Content","Header","Form","Field","inline","Input","label","iconPosition","type","maxLength","value","placeholder","onChange","target","icon","toLowerCase","Button","color","onClick","text","map","onCopy","Message","compact","setTimeout","verticalAlign","nanoid","Footer","textAlign","App","pauseOnFocusLoss","autoClose","transition","Slide","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1ae5ee3.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\n\r\nconst HeaderMenu = () => {\r\n  return (\r\n    <Menu inverted className=\"ui top fixed menu\">\r\n      <Menu.Item as=\"a\" header>\r\n        <Icon name=\"meh outline\" size=\"big\" />\r\n        Word Search\r\n      </Menu.Item>\r\n      <Menu.Item as=\"a\">Home</Menu.Item>\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default HeaderMenu\r\n","import axios from 'axios'\n\nconst baseUrl = 'https://api.datamuse.com/words?sp='\n\nexport const getWords = (word) => {\n  const request = axios.get(`${baseUrl}${word}`)\n  return request.then((response) => response.data)\n}\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Container,\n  Message,\n  Segment,\n  Form,\n  Input,\n  List,\n  Icon,\n} from 'semantic-ui-react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { nanoid } from 'nanoid'\nimport { stringDiff } from '../services/stringDiff'\nimport { toast } from 'react-toastify'\n\nimport { getWords } from '../services/dictionary'\nimport './MainContent.css'\n\nconst SearchForm = () => {\n  const [results, setResults] = useState([])\n  const [userInput, setUserInput] = useState('') //ba1122n\n  const [exclusions, setExclusions] = useState('')\n  const [copied, setCopied] = useState(false)\n  const [message, setMessage] = useState('')\n\n  const filterExclusions = (arr1, arr2) => {\n    let wildcards1 = userInput.match(/\\*|\\?/g)\n    let wildcards2 = userInput.match(/\\d/g)\n    const exArr = exclusions.split('').join('|')\n    const regx = new RegExp(`${exArr}`)\n    const newArr = arr2.filter(({ word }) => !word.match(regx))\n\n    if (wildcards1 !== null && wildcards2 === null) {\n      setResults((state) => [...state, ...newArr])\n    } else if (wildcards2 !== null && wildcards1 === null) {\n      filterStrings(arr1, newArr)\n    }\n  }\n\n  const filterStrings = (arr1, arr2) => {\n    console.log('arr1', arr1, 'arr2', arr2)\n    let newStringArr = arr2?.reduce((acc, item) => {\n      if (item.word.length === userInput.length) {\n        acc.push(item)\n      }\n      return acc\n    }, [])\n    newStringArr.forEach((obj) => {\n      const newArr = stringDiff(arr1, obj.word)\n      if (newArr.error) {\n        toast(`Error: ${newArr.error}; Param: ${obj.word}`)\n      } else if (newArr.results.length > 0) {\n        setResults((state) => [...state, ...newArr.results])\n      } else {\n        console.log('else... results', results)\n      }\n    })\n  }\n\n  const handleClick = async (e) => {\n    e.preventDefault()\n    setResults([])\n    let wildcards1 = userInput.match(/\\*|\\?/g)\n    let alpha = userInput.match(/[\\d\\\\?\\\\*]/g)\n    let numeric = userInput.match(/\\d/g)\n    console.log('alpha', alpha, 'numeric', numeric)\n    let r\n    if (userInput.length > 10) {\n      toast(\n        'Word search is limited to 30 characters or less. Please adjust search accordingly.'\n      )\n    } else if (exclusions.length > 25) {\n      toast('Exclusions are limited to 25 characters or less.')\n    } else {\n      r = await getWords(userInput)\n      if (!exclusions) {\n        if (wildcards1 !== null || alpha === null) {\n          console.log('userInput ? or *', userInput)\n\n          console.log('wildcards1', wildcards1)\n          setResults((state) => [...state, ...r])\n        } else if (numeric !== null) {\n          const regx = /\\d/g\n          const newUserInput = userInput.replace(regx, '?')\n          console.log('newUserInput numeric', newUserInput)\n          const s = await getWords(newUserInput)\n          filterStrings(userInput, s)\n        } else {\n          console.log('userInput not numeric', userInput)\n        }\n      } else {\n        filterExclusions(userInput, r)\n      }\n    }\n  }\n\n  const copyResults = () => {\n    return results?.map((obj) => obj.word)\n  }\n\n  const handleCopy = () => {\n    setCopied(true)\n    setMessage(<Message compact>List copied!</Message>)\n    setTimeout(() => {\n      setMessage('')\n    }, 5000)\n  }\n\n  return (\n    <Container fluid className=\"content-container\">\n      <Segment className=\"main-content\">\n        <h1>Cryptogram or Crossword Word Search</h1>\n\n        <List celled>\n          <h2>Wildcards:</h2>\n          <List.Item>\n            <Icon name=\"question\" size=\"large\" />\n            <List.Content>\n              <List.Header as=\"h2\">\n                Use one ? for each individual unknown letter.\n              </List.Header>\n              Example: b?ar might return bear, or boar.\n            </List.Content>\n          </List.Item>\n\n          <List.Item>\n            <Icon name=\"asterisk\" size=\"large\" />\n            <List.Content>\n              <List.Header as=\"h2\">\n                Use * for unknown number of missing letters (zero or more).\n              </List.Header>\n              Example: excel* might return excellent, excellence, and\n              excellently.\n            </List.Content>\n          </List.Item>\n\n          <List.Item>\n            <Icon name=\"sort numeric ascending\" size=\"large\" />\n            <List.Content>\n              <List.Header as=\"h2\">\n                Use numeric digits 0 - 9 for two or more of the same letter.\n              </List.Header>\n              For example, if a word has more than one set of repeating letters,\n              you can use different numbers for different sets of letters. For\n              example, 'balloon' could be 'ba1122n', or 'excellence' could be:\n              1xc1221nc1.\n            </List.Content>\n          </List.Item>\n\n          <List.Item>\n            <Icon name=\"exclamation circle\" size=\"large\" />\n            <List.Content>\n              <List.Header as=\"h2\">Note:</List.Header>\n              You may combine the ? and * wildcards all you want, but if you\n              combine numeric characters with other wildcards, you may get\n              unexpected results, or no results at all.\n              <br />\n              Also, be sure to include at least one alpha (non-numeric)\n              character.\n            </List.Content>\n          </List.Item>\n        </List>\n\n        <br />\n        <Form>\n          <Form.Field inline>\n            <Input\n              label=\"Exclude: \"\n              fluid\n              iconPosition=\"left\"\n              type=\"text\"\n              maxLength=\"25\"\n              value={exclusions}\n              placeholder=\"Letters to exclude from search query\"\n              onChange={({ target }) => setExclusions(target.value)}\n            />\n          </Form.Field>\n          <Form.Field inline>\n            <Input\n              fluid\n              icon=\"search\"\n              iconPosition=\"left\"\n              placeholder=\"ab??ef\"\n              type=\"text\"\n              maxLength=\"30\"\n              value={userInput}\n              onChange={({ target }) =>\n                setUserInput(target.value.toLowerCase())\n              }\n            />\n          </Form.Field>\n\n          <br />\n          <Button color=\"teal\" size=\"large\" onClick={handleClick}>\n            Search\n          </Button>\n          {results.length > 0 ? (\n            <CopyToClipboard\n              className=\"CopyToClipboard\"\n              text={copyResults()}\n              onCopy={handleCopy}\n            >\n              <Button color=\"teal\" size=\"large\">\n                Copy List\n              </Button>\n            </CopyToClipboard>\n          ) : (\n            <></>\n          )}\n          {copied ? <div>{message} </div> : <></>}\n\n          <List\n            verticalAlign=\"middle\"\n            value={results}\n            onChange={() => setCopied(false)}\n          >\n            {results?.map((obj) => (\n              <List.Item key={nanoid()}>{obj.word}</List.Item>\n            ))}\n          </List>\n        </Form>\n      </Segment>\n    </Container>\n  )\n}\n\nexport default SearchForm\n","export const stringDiff = (a, b) => {\n  let i = 0,\n    j = 0,\n    len1 = a.length,\n    len2 = b.length,\n    end1 = false,\n    end2 = false,\n    match = false,\n    error = ''\n  const results = []\n\n  while (true) {\n    if (a.length !== b.length) {\n      end1 = true\n      end2 = true\n      match = false\n      console.log('params must be equal length')\n      error = 'params must be equal length'\n    }\n    if (end1 && end2) break\n    if (a[i] === b[j] && !end1 && !end2) {\n      end1 = i + 1 === len1\n      end2 = j + 1 === len2\n      end1 || i++\n      end2 || j++\n      continue\n    }\n\n    if (a[i] !== b[j] && !end1 && !end2) {\n      console.log('a', a, 'b', b)\n\n      const strMatch1 = [...a.matchAll(a[i])]\n      const strMatch2 = [...b.matchAll(b[j])]\n      if (strMatch1.length !== strMatch2.length) {\n        end1 = true\n        end2 = true\n        match = false\n        break\n      } else {\n        end1 = i + 1 === len1\n        end2 = j + 1 === len2\n        end1 || i++\n        end2 || j++\n        match = true\n        continue\n      }\n    }\n  }\n\n  if (match === true) {\n    results.push({ word: b })\n  }\n  return { match, results, error }\n}\n\n// originally from https://github.com/Lin-H/comparer - some changes made\n","import React from 'react'\r\nimport { Icon, Segment } from 'semantic-ui-react'\r\n\r\nfunction Footer() {\r\n  return (\r\n    <Segment\r\n      textAlign=\"center\"\r\n      inverted\r\n      className=\"ui bottom fixed three item menu\"\r\n    >\r\n      <div className=\"item\"></div>\r\n      <div className=\"item\">\r\n        <Icon name=\"meh outline\" size=\"big\" />\r\n        CopyRight Andrea Crego 2020\r\n      </div>\r\n\r\n      <div className=\"item\"></div>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { Container } from 'semantic-ui-react'\r\nimport HeaderMenu from './components/Heading'\r\nimport SearchForm from './components/SearchForm'\r\nimport Footer from './components/Footer'\r\nimport { ToastContainer, Slide } from 'react-toastify'\r\nimport './ReactToastify.css'\r\n\r\nconst App = () => (\r\n  <Container fluid>\r\n    <HeaderMenu />\r\n    <ToastContainer\r\n      pauseOnFocusLoss={false}\r\n      autoClose={2000}\r\n      transition={Slide}\r\n    />\r\n    <SearchForm />\r\n    <Footer />\r\n  </Container>\r\n)\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n//https://github.com/james-leung/semantic-ui-project"],"sourceRoot":""}