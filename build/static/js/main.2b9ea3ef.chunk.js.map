{"version":3,"sources":["components/Heading.js","services/dictionary.js","components/SearchForm.js","services/stringDiff.js","components/Footer.js","responsive.js","App.js","index.js"],"names":["HeaderMenu","Menu","inverted","className","Item","as","header","Icon","name","size","getWords","word","a","axios","get","response","data","length","SearchForm","useState","results","setResults","userInput","setUserInput","exclusions","setExclusions","setCopied","toggle","setToggle","buttonText","setButtonText","loading","setLoading","filterResults","arr1","arr2","newArr","b","c","replacer2","reduce","regXString","placeholder","replace","RegExp","String","regXWord","filter","item","test","map","match","console","log","stringDiff","state","handleClick","e","preventDefault","numUserInput","toLowerCase","toast","handleValidation","r","input","excl","regx","valInput","valExcl","fixInput","fixExclusions","Container","fluid","Segment","List","celled","style","display","Content","verticalAlign","Header","Form","Field","inline","Input","label","iconPosition","type","maxLength","value","onChange","target","icon","Message","error","Button","color","onClick","newResults","sort1","sort","sort2","text","obj","onCopy","nanoid","Footer","Group","horizontal","href","rel","viewportContext","createContext","ViewportProvider","children","window","innerWidth","width","setWidth","innerHeight","height","setHeight","handleWindowResize","useEffect","addEventListener","removeEventListener","Provider","App","pauseOnFocusLoss","autoClose","transition","Slide","ReactDOM","render","document","getElementById"],"mappings":"oRAeeA,EAZI,WACjB,OACE,eAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,UAAU,oBAAzB,UACE,eAACF,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAIC,QAAM,EAAxB,UACE,cAACC,EAAA,EAAD,CAAMC,KAAK,cAAcC,KAAK,QADhC,iBAIA,cAACR,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAd,sB,mICLOK,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACCC,IAAMC,IAAN,UAJT,sCAIS,OAAuBH,IADxB,aAChBI,EADgB,QAETC,KAAKC,OAAS,GAFL,yCAGbF,EAASC,MAHI,gCAKb,CAAC,CAAEL,KAAM,gBALI,2CAAH,sDCsONO,G,OAzNI,WAAO,IAAD,EACOC,mBAAS,IADhB,mBAChBC,EADgB,KACPC,EADO,OAEWF,mBAAS,IAFpB,mBAEhBG,EAFgB,KAELC,EAFK,OAGaJ,mBAAS,IAHtB,mBAGhBK,EAHgB,KAGJC,EAHI,OAKKN,oBAAS,GALd,mBAKRO,GALQ,aAMKP,oBAAS,GANd,mBAMhBQ,EANgB,KAMRC,EANQ,OAOaT,mBAAS,YAPtB,mBAOhBU,EAPgB,KAOJC,EAPI,OAQOX,oBAAS,GARhB,mBAQhBY,EARgB,KAQPC,EARO,KA2BjBC,EAAgB,SAACC,EAAMC,GAC3B,IAAMC,EC9CgB,SAACxB,EAAGyB,EAAGC,GAC/B,IAOMC,EAPW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,QAC3C,SAACC,EAAYC,GAAb,OACED,EAAWE,QAAQC,OAAOF,EAAa,IAAvC,aAAkDJ,EAAlD,SACFO,OAAOjC,IAGkB+B,QAAQ,WAAY,QACnBA,QAAQ,MAAlB,YAA8BL,EAA9B,MACZQ,EAAWF,OAAOL,EAAW,IAC7BnB,EAAUiB,EACbU,QAAO,SAACC,GAAD,OAAUF,EAASG,KAAKD,EAAKrC,SACpCuC,KAAI,SAACF,GAEJ,MAAO,CAAErC,KADIqC,EAAKrC,KAAKwC,MAAML,GACT,OAExB,OAAuB,IAAnB1B,EAAQH,QACVmC,QAAQC,IAAI,qBAAsBjC,GAC3B,CAAC,CAAET,KAAM,kCAEXS,ED0BUkC,CAAWpB,EAAMC,EAAMX,GAEtC,OADAH,GAAW,SAACkC,GAAD,4BAAeA,GAAf,YAAyBnB,OAC7BhB,GAGHoC,EAAW,uCAAG,WAAOC,GAAP,iBAAA7C,EAAA,yDAClB6C,EAAEC,iBACFrC,EAAW,IACLsC,EAAerC,EAAUqB,QAAQ,MAAO,KAAKiB,gBAC/CtC,EAAUL,OAAS,IAJL,gBAKhB4C,YACE,sFANc,4BAQPrC,EAAWP,OAAS,IARb,iBAShB4C,YAAM,oDATU,2BAUc,IAArBvC,EAAUL,QAAsC,IAAtBO,EAAWP,OAV9B,iBAWhB4C,YAAM,uBAXU,6BAYPrC,EAAWP,OAAS,GAA0B,IAArBK,EAAUL,QAZ5B,iBAahB4C,YAAM,uBAbU,+BAehB7B,GAAW,GACX8B,EAAiBxC,EAAWE,GAhBZ,UAkBAd,EAASiD,GAlBT,WAkBVI,EAlBU,OAmBhB/B,GAAW,GACO,eAAd+B,EAAE,GAAGpD,KApBO,iBAqBdU,EAAW0C,GArBG,iDAuBP9B,EAAcX,EAAUsC,cAAeG,IAvBhC,4CAAH,sDAqCXD,EAAmB,SAACE,EAAOC,GAC/B,IAAMC,EAAO,IAAItB,OACf,6FACA,KAGIuB,EAAQ,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAOb,MAAMe,GACxBE,EAAO,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAMd,MAAMe,GACtBG,EAAQ,OAAG/C,QAAH,IAAGA,OAAH,EAAGA,EAAWqB,QAAQwB,EAAU,IACxCG,EAAa,OAAG9C,QAAH,IAAGA,OAAH,EAAGA,EAAYmB,QAAQyB,EAAS,KAC/C9C,EAAUL,OAAS,GAAKO,EAAWP,OAAS,KAC1CkD,GAAYC,KACd7C,EAAa8C,GACb5C,EAAc6C,GACM,MAAhBH,EAAS,GACXN,YAAM,+CAENA,YAAM,+CAMd,OACE,cAACU,EAAA,EAAD,CAAWC,OAAK,EAACrE,UAAU,oBAA3B,SACE,eAACsE,EAAA,EAAD,CAAStE,UAAU,eAAnB,UACE,wDACA,eAACuE,EAAA,EAAD,CAAMC,QAAM,EAAZ,UACE,cAACD,EAAA,EAAKtE,KAAN,CAAWwE,MAAO,CAAEC,QAAS,gBAA7B,SACE,cAACH,EAAA,EAAKI,QAAN,CAAcC,cAAc,SAA5B,SACE,cAACL,EAAA,EAAKM,OAAN,CAAa3E,GAAG,KAAhB,uEAKJ,cAACqE,EAAA,EAAKtE,KAAN,CAAWwE,MAAO,CAAEC,QAAS,gBAA7B,SACE,cAACH,EAAA,EAAKI,QAAN,CAAcC,cAAc,SAA5B,SACE,cAACL,EAAA,EAAKM,OAAN,CAAa3E,GAAG,KAAhB,uFAMJ,cAACqE,EAAA,EAAKtE,KAAN,CAAWwE,MAAO,CAAEC,QAAS,gBAA7B,SACE,eAACH,EAAA,EAAKI,QAAN,CAAcC,cAAc,SAA5B,UACE,cAACL,EAAA,EAAKM,OAAN,CAAa3E,GAAG,KAAhB,2DADF,iDAOF,cAACqE,EAAA,EAAKtE,KAAN,UACE,eAACsE,EAAA,EAAKI,QAAN,CAAcC,cAAc,SAA5B,UACE,cAACL,EAAA,EAAKM,OAAN,CAAa3E,GAAG,KAAhB,0EADF,wNAWF,cAACqE,EAAA,EAAKtE,KAAN,UACE,eAACsE,EAAA,EAAKI,QAAN,CAAcC,cAAc,SAA5B,UACE,cAACL,EAAA,EAAKM,OAAN,CAAa3E,GAAG,KAAhB,yBADF,6TAUJ,uBACA,eAAC4E,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,MAAN,CAAYC,QAAM,EAAlB,SACE,cAACF,EAAA,EAAKG,MAAN,CACEC,MAAM,YACNb,OAAK,EACLc,aAAa,OACbC,KAAK,OACLC,UAAU,KACVC,MAAOjE,EACPkB,YAAY,uCACZgD,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OACRlE,EAAckE,EAAOF,MAAM7B,oBAIjC,eAACqB,EAAA,EAAKC,MAAN,CAAYC,QAAM,EAAlB,UACE,cAACF,EAAA,EAAKG,MAAN,CACEZ,OAAK,EACLoB,KAAK,SACLN,aAAa,OACb5C,YAAY,SACZ6C,KAAK,OACLC,UAAU,KACVC,MAAOnE,EACPoE,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OACRpE,EAAaoE,EAAOF,MAAM7B,kBAG9B,cAACiC,EAAA,EAAD,CAASC,OAAK,OAGhB,cAACC,EAAA,EAAD,CAAQC,MAAM,OAAOvF,KAAK,QAAQwF,QAASzC,EAA3C,oBAGCpC,EAAQH,OAAS,GAAyB,eAApBG,EAAQ,GAAGT,KAChC,qCACE,cAACoF,EAAA,EAAD,CAAQC,MAAM,OAAOvF,KAAK,QAAQwF,QA3K3B,WACjB,IAAMC,EAAU,YAAO9E,GACjB+E,EAAQ/E,EAAQgF,MAAK,SAACxF,EAAGyB,GAAJ,OAAWzB,EAAED,KAAO0B,EAAE1B,KAAO,GAAK,KAMvD0F,EAAQH,EAAWE,MAAK,SAACxF,EAAGyB,GAAJ,OAAWzB,EAAED,KAAO0B,EAAE1B,MAAQ,EAAI,MAMrD,IAAXgB,GAJEC,GAAU,GACVE,EAAc,cACdT,EAAWgF,KARXzE,GAAU,GACVE,EAAc,cACdT,EAAW8E,KAqKH,SACGtE,IAEH,cAAC,kBAAD,CACE1B,UAAU,kBACVmG,KA5HZ,OAAOlF,QAAP,IAAOA,OAAP,EAAOA,EAAS8B,KAAI,SAACqD,GAAD,OAASA,EAAI5F,QA6HrB6F,OA1HK,WACjB9E,GAAU,GACVmC,YAAM,iBAqHI,SAKE,cAACkC,EAAA,EAAD,CAAQC,MAAM,OAAOvF,KAAK,QAA1B,4BAMJ,6BAEF,eAACiE,EAAA,EAAD,CACEK,cAAc,SACdU,MAAOrE,EACPsE,SAAU,kBAAMhE,GAAU,IAH5B,UAKGK,EAAU,cAACxB,EAAA,EAAD,CAAMwB,SAAO,EAACvB,KAAK,YAAe,6BAC5CY,EAAQH,OAAS,EAChBG,EAAQ8B,KAAI,SAACqD,GACX,OAAO,cAAC7B,EAAA,EAAKtE,KAAN,UAA2BmG,EAAI5F,MAAf8F,kBAGzB,qCExMCC,MAvBf,WACE,OACE,eAACjC,EAAA,EAAQkC,MAAT,CACEC,YAAU,EACVzG,UAAU,2CAFZ,UAIE,cAACsE,EAAA,EAAD,IACA,eAACA,EAAA,EAAD,CAASvE,UAAQ,EAAjB,UACE,mBACE0E,MAAO,CAAEoB,MAAO,SAChBa,KAAK,+CACLlB,OAAO,SACPmB,IAAI,sBAJN,SAME,cAACvG,EAAA,EAAD,CAAMC,KAAK,SAASC,KAAK,UAP7B,iCAWA,cAACgE,EAAA,EAAD,QCnBAsC,EAAkBC,wBAAc,IAiCvBC,EA/BU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAGf/F,mBAASgG,OAAOC,YAHD,mBAGlCC,EAHkC,KAG3BC,EAH2B,OAIbnG,mBAASgG,OAAOI,aAJH,mBAIlCC,EAJkC,KAI1BC,EAJ0B,KAMnCC,EAAqB,WACzBJ,EAASH,OAAOC,YAChBK,EAAUN,OAAOI,cAWnB,OARAI,qBAAU,WAAO,IAAD,EAEd,OADM,QAAN,EAAAR,cAAA,SAAQS,iBAAiB,SAAUF,GAC5B,kBAAMP,OAAOU,oBAAoB,SAAUH,MACjD,IAMD,cAACX,EAAgBe,SAAjB,CAA0BrC,MAAO,CAAE4B,QAAOG,UAA1C,SACGN,KCCQa,G,OAjBH,WACV,OACE,cAAC,EAAD,UACE,eAACxD,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,CACEwD,kBAAkB,EAClBC,UAAW,IACXC,WAAYC,MAEd,cAAC,EAAD,IACA,cAAC,EAAD,WCdRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.2b9ea3ef.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\n\r\nconst HeaderMenu = () => {\r\n  return (\r\n    <Menu inverted className=\"ui top fixed menu\">\r\n      <Menu.Item as=\"a\" header>\r\n        <Icon name=\"meh outline\" size=\"big\" />\r\n        Word Search\r\n      </Menu.Item>\r\n      <Menu.Item as=\"a\">Home</Menu.Item>\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default HeaderMenu\r\n","import axios from 'axios'\n\nconst baseUrl = 'https://api.datamuse.com/words?sp='\nconst udUrl = 'http://api.urbandictionary.com/v0/define?term='\n\nexport const getWords = async (word) => {\n  const response = await axios.get(`${baseUrl}${word}`)\n  if (response.data.length > 0) {\n    return response.data\n  } else {\n    return [{ word: 'No results' }]\n  }\n}\n\nexport const getUDWords = async (word) => {\n  const response = await axios.get(`${udUrl}${word}`)\n  return response.data\n}\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Container,\n  Segment,\n  Form,\n  List,\n  Message,\n  Icon,\n} from 'semantic-ui-react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { nanoid } from 'nanoid'\nimport { stringDiff } from '../services/stringDiff'\nimport { toast } from 'react-toastify'\n\nimport { getWords } from '../services/dictionary'\nimport './MainContent.css'\n\nconst SearchForm = () => {\n  const [results, setResults] = useState([])\n  const [userInput, setUserInput] = useState('')\n  const [exclusions, setExclusions] = useState('')\n  // eslint-disable-next-line no-unused-vars\n  const [copied, setCopied] = useState(false)\n  const [toggle, setToggle] = useState(false)\n  const [buttonText, setButtonText] = useState('Sort a-z')\n  const [loading, setLoading] = useState(false)\n\n  const handleSort = () => {\n    const newResults = [...results]\n    const sort1 = results.sort((a, b) => (a.word < b.word ? 1 : -1))\n    const sort1tog = () => {\n      setToggle(false)\n      setButtonText('Sort a - z')\n      setResults(sort1)\n    }\n    const sort2 = newResults.sort((a, b) => (a.word < b.word ? -1 : 1))\n    const sort2tog = () => {\n      setToggle(true)\n      setButtonText('Sort z - a')\n      setResults(sort2)\n    }\n    toggle === false ? sort2tog() : sort1tog()\n  }\n\n  const filterResults = (arr1, arr2) => {\n    const newArr = stringDiff(arr1, arr2, exclusions)\n    setResults((state) => [...state, ...newArr])\n    return results\n  }\n\n  const handleClick = async (e) => {\n    e.preventDefault()\n    setResults([])\n    const numUserInput = userInput.replace(/\\d/g, '?').toLowerCase()\n    if (userInput.length > 30) {\n      toast(\n        'Word search is limited to 30 characters or less. Please adjust search accordingly.'\n      )\n    } else if (exclusions.length > 25) {\n      toast('Exclusions are limited to 25 characters or less.')\n    } else if (userInput.length === 0 && exclusions.length === 0) {\n      toast('Please enter query.')\n    } else if (exclusions.length > 0 && userInput.length === 0) {\n      toast('Please enter query.')\n    } else {\n      setLoading(true)\n      handleValidation(userInput, exclusions)\n\n      const r = await getWords(numUserInput)\n      setLoading(false)\n      if (r[0].word === 'No results') {\n        setResults(r)\n      } else {\n        return filterResults(userInput.toLowerCase(), r)\n      }\n    }\n  }\n\n  const copyResults = () => {\n    return results?.map((obj) => obj.word)\n  }\n\n  const handleCopy = () => {\n    setCopied(true)\n    toast('List copied!')\n  }\n\n  const handleValidation = (input, excl) => {\n    const regx = new RegExp(\n      '0|%|&|#|@|,|<|>|`|~|_|=|\\\\^|\\\\||\\\\*|\\\\$|\\\\-|\\\\+|\\\\[|\\\\]|\\\\;|\\\\/|\\\\.|\\\\,|\\'|\\\\(|\\\\)|\\\\!|\\\\\"',\n      'g'\n    )\n\n    const valInput = input?.match(regx)\n    const valExcl = excl?.match(regx)\n    const fixInput = userInput?.replace(valInput, '')\n    const fixExclusions = exclusions?.replace(valExcl, '')\n    if (userInput.length > 0 || exclusions.length > 0) {\n      if (valInput || valExcl) {\n        setUserInput(fixInput)\n        setExclusions(fixExclusions)\n        if (valInput[0] === '0') {\n          toast('Please only use digits 1 - 9 for wildcards.')\n        } else {\n          toast('Please restrict entries to letters a - z.')\n        }\n      }\n    }\n  }\n\n  return (\n    <Container fluid className=\"content-container\">\n      <Segment className=\"main-content\">\n        <h1>Cryptogram Word Search</h1>\n        <List celled>\n          <List.Item style={{ display: 'inline-block' }}>\n            <List.Content verticalAlign=\"middle\">\n              <List.Header as=\"h2\">\n                All queries must contain at least one (1) letter a-z.\n              </List.Header>\n            </List.Content>\n          </List.Item>\n          <List.Item style={{ display: 'inline-block' }}>\n            <List.Content verticalAlign=\"middle\">\n              <List.Header as=\"h2\">\n                Searches are case-insensitive, i.e., capitalized letters are\n                ignored.\n              </List.Header>\n            </List.Content>\n          </List.Item>\n          <List.Item style={{ display: 'inline-block' }}>\n            <List.Content verticalAlign=\"middle\">\n              <List.Header as=\"h2\">\n                Use one ? for each individual unknown letter.\n              </List.Header>\n              Example: b?ar might return bear, or boar.\n            </List.Content>\n          </List.Item>\n          <List.Item>\n            <List.Content verticalAlign=\"middle\">\n              <List.Header as=\"h2\">\n                Use numeric digits 1 - 9 for two or more of the same letter.\n              </List.Header>\n              For example, if a word has more than one set of repeating letters,\n              you can use different numbers for different sets of letters. For\n              example, 'balloon' could be 'ba1122n', or 'excellence' could be:\n              1xc1221nc1.\n            </List.Content>\n          </List.Item>\n\n          <List.Item>\n            <List.Content verticalAlign=\"middle\">\n              <List.Header as=\"h2\">Exclusions:</List.Header>\n              Any letters entered into the 'exclusions' filter will eliminate\n              any results containing the excluded letter(s) in the wildcard \"?\"\n              position(s). The provided known letters are ignored, i.e., if your\n              query is 'ba?y', and you exclude the letter 'b', the word 'baby'\n              will NOT be included in the returned list.\n            </List.Content>\n          </List.Item>\n        </List>\n        <br />\n        <Form>\n          <Form.Field inline>\n            <Form.Input\n              label=\"Exclude: \"\n              fluid\n              iconPosition=\"left\"\n              type=\"text\"\n              maxLength=\"25\"\n              value={exclusions}\n              placeholder=\"Letters to exclude from search query\"\n              onChange={({ target }) =>\n                setExclusions(target.value.toLowerCase())\n              }\n            />\n          </Form.Field>\n          <Form.Field inline>\n            <Form.Input\n              fluid\n              icon=\"search\"\n              iconPosition=\"left\"\n              placeholder=\"ab??ef\"\n              type=\"text\"\n              maxLength=\"30\"\n              value={userInput}\n              onChange={({ target }) =>\n                setUserInput(target.value.toLowerCase())\n              }\n            />\n            <Message error />\n          </Form.Field>\n\n          <Button color=\"teal\" size=\"large\" onClick={handleClick}>\n            Search\n          </Button>\n          {results.length > 0 && results[0].word !== 'no matches' ? (\n            <>\n              <Button color=\"teal\" size=\"large\" onClick={handleSort}>\n                {buttonText}\n              </Button>\n              <CopyToClipboard\n                className=\"CopyToClipboard\"\n                text={copyResults()}\n                onCopy={handleCopy}\n              >\n                <Button color=\"teal\" size=\"large\">\n                  Copy List\n                </Button>\n              </CopyToClipboard>\n            </>\n          ) : (\n            <></>\n          )}\n          <List\n            verticalAlign=\"middle\"\n            value={results}\n            onChange={() => setCopied(false)}\n          >\n            {loading ? <Icon loading name=\"spinner\" /> : <></>}\n            {results.length > 0 ? (\n              results.map((obj) => {\n                return <List.Item key={nanoid()}>{obj.word}</List.Item>\n              })\n            ) : (\n              <div></div>\n            )}\n          </List>\n        </Form>\n      </Segment>\n    </Container>\n  )\n}\n\nexport default SearchForm\n","export const stringDiff = (a, b, c) => {\n  const reducer1 = [1, 2, 3, 4, 5, 6, 7, 8, 9].reduce(\n    (regXString, placeholder) =>\n      regXString.replace(RegExp(placeholder, ''), `([^${c}])`),\n    String(a)\n  )\n\n  const replacer1 = reducer1.replace(/([1-9])/g, '\\\\$1')\n  const replacer2 = replacer1.replace(/\\?/g, `[^${c}]`)\n  const regXWord = RegExp(replacer2, '')\n  const results = b\n    .filter((item) => regXWord.test(item.word))\n    .map((item) => {\n      const word = item.word.match(regXWord)\n      return { word: word[0] }\n    })\n  if (results.length === 0) {\n    console.log('stringDiff results', results)\n    return [{ word: 'Nothing matches the pattern.' }]\n  }\n  return results\n}\n//https://stackoverflow.com/questions/65514498/filter-array-of-strings-based-on-a-pattern-with-placeholders\n","import React from 'react'\r\nimport { Icon, Segment } from 'semantic-ui-react'\r\n\r\nfunction Footer() {\r\n  return (\r\n    <Segment.Group\r\n      horizontal\r\n      className=\"ui inverted bottom fixed three item menu\"\r\n    >\r\n      <Segment></Segment>\r\n      <Segment inverted>\r\n        <a\r\n          style={{ color: 'white' }}\r\n          href=\"https://github.com/I-keep-trying/word-search\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Icon name=\"github\" size=\"big\" />\r\n        </a>\r\n        CopyRight Andrea Crego 2020\r\n      </Segment>\r\n      <Segment></Segment>\r\n    </Segment.Group>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React, { useState, useEffect, createContext, useContext } from 'react'\n\nconst viewportContext = createContext({})\n\nconst ViewportProvider = ({ children }) => {\n  // This is the exact same logic that we previously had in our hook\n\n  const [width, setWidth] = useState(window.innerWidth)\n  const [height, setHeight] = useState(window.innerHeight)\n\n  const handleWindowResize = () => {\n    setWidth(window.innerWidth)\n    setHeight(window.innerHeight)\n  }\n\n  useEffect(() => {\n    window?.addEventListener('resize', handleWindowResize)\n    return () => window.removeEventListener('resize', handleWindowResize)\n  }, [])\n\n  /* Now we are dealing with a context instead of a Hook, so instead\n       of returning the width and height we store the values in the\n       value of the Provider */\n  return (\n    <viewportContext.Provider value={{ width, height }}>\n      {children}\n    </viewportContext.Provider>\n  )\n}\n\nexport const useViewport = () => {\n  const { width, height } = useContext(viewportContext)\n  return { width, height }\n}\n\nexport default ViewportProvider\n","import React from 'react'\r\nimport { Container } from 'semantic-ui-react'\r\nimport HeaderMenu from './components/Heading'\r\nimport SearchForm from './components/SearchForm'\r\nimport Footer from './components/Footer'\r\nimport ViewportProvider from './responsive'\r\nimport { ToastContainer, Slide } from 'react-toastify'\r\nimport './ReactToastify.css'\r\n\r\nconst App = () => {\r\n  return (\r\n    <ViewportProvider>\r\n      <Container fluid>\r\n        <HeaderMenu />\r\n        <ToastContainer\r\n          pauseOnFocusLoss={false}\r\n          autoClose={2000}\r\n          transition={Slide}\r\n        />\r\n        <SearchForm />\r\n        <Footer />\r\n      </Container>\r\n    </ViewportProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}